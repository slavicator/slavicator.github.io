{"version":3,"sources":["AppHeader.js","AppPlan.js","AppCurrency.js","AppWeather.js","AppContent.js","AppFooter.js","App.js","serviceWorker.js","index.js"],"names":["AppHeader","react_default","a","createElement","className","AppPlan","AppCurrency","class","AppWeather","AppContent","src_AppCurrency","src_AppPlan","src_AppWeather","AppFooter","App","src_AppHeader","src_AppContent","src_AppFooter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAiBeA,MAff,WACI,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,+BAGAF,EAAAC,EAAAC,cAAA,wCC6BDE,MApCf,WACI,OACJJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,kCAIAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,6CAAJ,+IAEAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,0BAAJ,oNAGAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,8BAAJ,qNAGAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,+BAAJ,oGAEAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,6CAAJ,4IAEAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,8CAAJ,kDACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,8CAAJ,yFAEAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,8CAAJ,mGAEAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,gFACJF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,yEACJF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,6EACJF,EAAAC,EAAAC,cAAA,iECPWG,MAtBf,WACI,OACJL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKI,MAAM,uBAETN,EAAAC,EAAAC,cAAA,UAAQI,MAAM,0BACZN,EAAAC,EAAAC,cAAA,uBAGFF,EAAAC,EAAAC,cAAA,OAAKI,MAAM,gBACTN,EAAAC,EAAAC,cAAA,0CAGFF,EAAAC,EAAAC,cAAA,UAAQI,MAAM,0BACZN,EAAAC,EAAAC,cAAA,uBCQSK,MAtBf,WACI,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACrBH,EAAAC,EAAAC,cAAA,OAAKI,MAAM,uBAETN,EAAAC,EAAAC,cAAA,UAAQI,MAAM,yBACZN,EAAAC,EAAAC,cAAA,sBAGFF,EAAAC,EAAAC,cAAA,OAAKI,MAAM,gBACTN,EAAAC,EAAAC,cAAA,wCAGFF,EAAAC,EAAAC,cAAA,UAAQI,MAAM,yBACZN,EAAAC,EAAAC,cAAA,0BCDSM,MAVf,WACI,OACIR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACO,EAAD,MACAT,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAACS,EAAD,QCEGC,MAVf,WACI,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACXH,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,mCCWDW,MAVf,WACE,OACEb,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAD,QCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d865e104.chunk.js","sourcesContent":["import React from 'react';\n\nfunction AppHeader () {\n    return (\n        <div className=\"w3-container w3-gray\">\n            <header>\n                <h1>\n                IT Academi Course\n                </h1>\n                <h3>\n                HTML5/ CSS3/ JAVASCRIPT\n                </h3>\n            </header>\n        </div>\n    )\n}\n\nexport default AppHeader;","import React from 'react'\n\nfunction AppPlan () {\n    return (\n<div className='w3-half w3-container'>\n<div className='w3-center'>\n  <h1>\n    Plan of this course\n  </h1>\n</div>\n  <ul>\n    <li><strong>Introduction to the course:</strong> Understanding how web browser and web server communicate.\n      Introducing tools: Web-browser Developer Tools, Web page prototyping tools, IDE.</li>\n    <li><strong>HTML5.2:</strong> HTML Document Structure, Tag Pairs, Element, Links, Nesting, HTML Validator, New and\n      deprecated tags in HTML5, Image basics, Video and Audio. Semantic markup, Tables, Lists, Forms: data input and\n      validation.</li>\n    <li><strong>CSS3 Part I:</strong> Adding CSS to webpage, Selectors, Specificity, Font Basics, Inline and Block flow,\n      CSS Positioning, Overflow, Z-Index, Vendor Prefixes, Box Models, Inherited Properties, Browser Default Styles,\n      Layouts Intro.</li>\n    <li><strong>CSS3 Part II:</strong> FlexBox Model. CSS Grid Layout. Media Queries, CSS Effects. Making layout for\n      typical web page.</li>\n    <li><strong>JavaScript (ES2018) Part I:</strong> Adding JavaScript to webpage, Comments, Data Types, Declaring\n      variables, Type casting, Functions, Conditions, Ternary Operator, Switch.</li>\n    <li><strong>JavaScript (ES2018) Part II:</strong> Loops, Anonymous and Arrow Functions, Arrays.</li>\n    <li><strong>JavaScript (ES2018) Part II:</strong> Objects, Prototype-Based Inheritance, Dictionaries, Closures,\n      Promises, async/await.</li>\n    <li><strong>DOM Manipulation and jQuery:</strong> Intro to DOM, Locating elements on DOM, Modifying DOM, Setting\n      Event Handlers, Intro to jQuery</li>\n    <li><strong>Making AJAX/Fetch Queries with Vanilla JavaScript and jQuery.</strong></li>\n    <li><strong>Basics of using Bootstrap 4 for Responsive web design.</strong></li>\n    <li><strong>Creating Functional Online Store. Introduction to Node.js.</strong></li>\n    <li>PRESENTATION OF A PROJECT, AWARDING CERTIFICATES</li>\n  </ul>\n\n</div>\n    )\n}\n\nexport default AppPlan","import React from 'react'\n\nfunction AppCurrency () {\n    return (\n<div className='w3-quarter'>\n  <div class=\"w3-card-4 w3-margin\">\n\n    <header class=\"w3-container w3-yellow\">\n      <h1>Currency</h1>\n    </header>\n\n    <div class=\"w3-container\">\n      <p>Some JavaScript will be here</p>\n    </div>\n\n    <footer class=\"w3-container w3-yellow\">\n      <h5>Money</h5>\n    </footer>\n\n  </div>\n</div>\n    )\n}\n\nexport default AppCurrency","import React from 'react'\n\nfunction AppWeather () {\n    return (\n        <div className='w3-quarter w3-container'>\n  <div class=\"w3-card-4 w3-margin\">\n\n    <header class=\"w3-container w3-green\">\n      <h1>Weather</h1>\n    </header>\n\n    <div class=\"w3-container\">\n      <p>Also JavaScriptwil be here</p>\n    </div>\n\n    <footer class=\"w3-container w3-green\">\n      <h5>Sunshine</h5>\n    </footer>\n\n  </div>\n            </div>\n    )\n}\n\nexport default AppWeather","import React from 'react';\nimport AppPlan from './AppPlan';\nimport AppCurrency from './AppCurrency';\nimport AppWeather from './AppWeather';\n\nfunction AppContent () {\n    return (\n        <div className=\"w3-row\">\n            <AppCurrency />\n            <AppPlan />\n            <AppWeather />            \n        </div>\n    )\n}\n\nexport default AppContent;","import React from 'react'\n\nfunction AppFooter () {\n    return (\n        <div className=\"w3-container w3-gray w3-center\">\n            <footer>\n                <h4>Yaroslav Yanitskyy</h4>\n            </footer>\n        </div>\n    )\n}\n\nexport default AppFooter","import React from 'react';\nimport './App.css';\nimport './w3.css';\nimport AppHeader from './AppHeader';\nimport AppContent from './AppContent';\nimport AppFooter from './AppFooter';\n\nfunction App() {\n  return (\n    <div>\n        <AppHeader />\n        <AppContent />\n        <AppFooter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}